class Solution {
    public int countCompleteComponents(int n, int[][] edges) {
        List<List<Integer>> graph = new ArrayList<>();
        for(int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }
        
        for(int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }
        
        boolean[] visited = new boolean[n];
        int completeComponents = 0;

        for(int i = 0; i < n; i++) {
            if(!visited[i]) {
                int[] componentStats = new int[]{0, 0};
                dfs(i, graph, visited, componentStats);
                
                int vertices = componentStats[0];
                int edgeCount = componentStats[1] / 2;  
                
                if(edgeCount == (vertices * (vertices - 1)) / 2) {  
                    completeComponents++;
                }
            }
        }
        return completeComponents;
    }
    
    private void dfs(int vertex, List<List<Integer>> graph, boolean[] visited, int[] componentStats) {
        visited[vertex] = true;
        componentStats[0]++;
        
        for(int neighbor : graph.get(vertex)) {
            componentStats[1]++;
            if(!visited[neighbor]) {
                dfs(neighbor, graph, visited, componentStats);
            }
        }
    }
}